import os
import datetime
import gspread
import pandas as pd
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏

SCOPES = [
    'https://www.googleapis.com/auth/calendar',
    'https://www.googleapis.com/auth/spreadsheets.readonly'
]

SPREADSHEET_ID = '1lwA3DqC5NxrHsd5jVXzEck0YSvielIUT4e1YepJtRDo' 
SHEET_NAME = '–î–µ–¥–ª–∞–π–Ω—ã'    

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google APIs

def get_calendar_service():
    print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Calendar API...")
    creds = None
    if os.path.exists('token.json'):
        print("–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∑–∫–∞...")
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
            creds.refresh(Request())
        else:
            print("–ó–∞–ø—É—Å–∫ OAuth flow –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.json', 'w') as token:
            token.write(creds.to_json())
            print("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    service = build('calendar', 'v3', credentials=creds)
    print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Calendar –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    return service

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã

def read_sheet_data():
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    gc_creds = ServiceAccountCredentials.from_json_keyfile_name("service-account.json", scope) 
    client = gspread.authorize(gc_creds)

    sheet = client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)
    data = sheet.get_all_records()
    print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{SHEET_NAME}'.")
    return sheet, pd.DataFrame(data)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ

def create_calendar_event(service, sheet, df_row):
    try:
        deadline_date = datetime.datetime.strptime(df_row['–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞'], "%d.%m.%Y").date()
    except ValueError:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –¥–ª—è –∑–∞—è–≤–∫–∏ {df_row['–ó–∞—è–≤–∫–∞']}: {df_row['–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞']}")
        return

    event_summary = f"{df_row['–ó–∞—è–≤–∫–∞']} ‚Äî {df_row['–î–µ–π—Å—Ç–≤–∏–µ']}"
    event_description = (
        f"–ö–ª–∏–µ–Ω—Ç: {df_row['–ö–ª–∏–µ–Ω—Ç']}\n"
        f"–°—Ç–∞—Ç—É—Å: {df_row['–°—Ç–∞—Ç—É—Å']}\n"
        f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {df_row['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']}"
    )

    event = {
        'summary': event_summary,
        'description': event_description,
        'start': {
            'date': deadline_date.strftime('%Y-%m-%d'),
            'timeZone': 'Europe/Moscow',
        },
        'end': {
            'date': deadline_date.strftime('%Y-%m-%d'),
            'timeZone': 'Europe/Moscow',
        },
        'reminders': {
            'useDefault': False,
            'overrides': [
                {'method': 'email', 'minutes': 60 * 24 * 3},  # –∑–∞ 3 –¥–Ω—è
                {'method': 'popup', 'minutes': 60}           # –∑–∞ 1 —á–∞—Å
            ],
        },
    }

    print(f"‚úÖ –°–æ–∑–¥–∞—é —Å–æ–±—ã—Ç–∏–µ: {event_summary} | –î–∞—Ç–∞: {deadline_date}")
    created_event = service.events().insert(calendarId='primary', body=event).execute()
    event_id = created_event['id']
    print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {event_summary} | Event ID: {event_id}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É —Å Event ID –≤ —Ç–∞–±–ª–∏—Ü–µ
    cell = sheet.find(df_row['–ó–∞—è–≤–∫–∞'])
    sheet.update_cell(cell.row, cell.col + 6, event_id)  # Event ID –≤ 7-–º —Å—Ç–æ–ª–±—Ü–µ
    print(f"üìå Event ID –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {cell.row}")

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å

def main():
    calendar_service = get_calendar_service()
    try:
        sheet, df = read_sheet_data()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ: {e}")
        return

    for index, row in df.iterrows():
        event_id = row.get('Event ID')
        if pd.isna(event_id) or event_id == '':
            try:
                create_calendar_event(calendar_service, sheet, row)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        else:
            print(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: —Å–æ–±—ã—Ç–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è {row['–ó–∞—è–≤–∫–∞']}")

    print("üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == '__main__':
    main()